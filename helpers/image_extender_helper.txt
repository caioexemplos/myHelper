using System;
using System.Collections.Generic;
using System.Text;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.IO;

namespace Core.Common.Helpers
{
    public static class ImageExtender
    {
        public static Image Resize(this Image current, int maxLargura, int maxAltura, bool isWithQuality = false)
        {
            int largura, altura;


            #region Calcular o tamanho
            if (isWithQuality)
            {
                if (current.Width > current.Height)
                {
                    largura = maxLargura;
                    altura = Convert.ToInt32(current.Height * maxAltura / (double)current.Width);
                }
                else
                {
                    largura = Convert.ToInt32(current.Width * maxAltura / (double)current.Height);
                    altura = maxAltura;
                }

            }
            else
            {
                largura = maxLargura;
                altura = maxAltura;
            }
            #endregion

            #region Recuperando a imagem redimensionada 

            var canvas = new Bitmap(largura, altura);

            using (var graphics = Graphics.FromImage(canvas))
            {
                graphics.CompositingQuality = CompositingQuality.HighSpeed;
                graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
                graphics.CompositingMode = CompositingMode.SourceCopy;
                graphics.DrawImage(current, 0, 0, largura, altura);
            }
            #endregion

            return canvas;
        }

        public static byte[] ToByteArray(this Image current)
        {
            using (var stream = new MemoryStream())
            {
                current.Save(stream, current.RawFormat);
                return stream.ToArray();
            }
        }


    }
}
